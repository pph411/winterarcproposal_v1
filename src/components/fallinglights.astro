<div id="starfield" class="absolute inset-0">
    <canvas id="starfield-canvas"></canvas>
</div>

<script>
    import invariant from "tiny-invariant";

    const COUNT = 500;
    const SPEED = 0.05;

    class Star {
    x: number;
    y: number;
    yPrev: number;
    size: number;
    originalSize: number; 
    

    constructor(x = 0, y = 0, size = Math.random() * 3 + 2) {
        this.x = x;
        this.y = y;
        this.yPrev = y;
        this.size = size;
        this.originalSize = size;
    }

    update(width: number, height: number, speed: number) {
        this.yPrev = this.y; // Guarda la posición anterior de y
        this.y += speed * 10; // Incrementa y para mover la estrella hacia abajo

        // Si la estrella sale de la pantalla por abajo, reinicia su posición en la parte superior
        if (this.y > height / 2) {
            this.x = Math.random() * width - width / 2; // Mantén una posición aleatoria en x
            this.y = -height / 2; // Reinicia la estrella en la parte superior
            this.yPrev = this.y; // Actualiza yPrev para evitar trazos inesperados
        }
    }

    draw(ctx: CanvasRenderingContext2D, isHovered: boolean) {
        
        ctx.lineWidth = isHovered ? this.size * 5 : this.size; // Establece el grosor de la línea
        ctx.strokeStyle = isHovered ? "yellow" : "white";
        ctx.beginPath();
        ctx.moveTo(this.x, this.yPrev); // Inicia la línea en la posición anterior
        ctx.lineTo(this.x, this.y); // Dibuja la línea hacia la posición actual
        ctx.stroke(); // Traza la línea
    }
}
// Variables para el efecto hover
let mouseX = 0;
let mouseY = 0;

    const stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
    let rafId = 0;

    const canvas = document.querySelector(
    "#starfield-canvas",
    ) as HTMLCanvasElement;
    invariant(canvas, "canvas should not be null");
    const ctx = canvas.getContext("2d");

    // Listener para actualizar las coordenadas del mouse
canvas.addEventListener("mousemove", (event) => {
    const rect = canvas.getBoundingClientRect();
    mouseX = event.clientX - rect.left - canvas.width / 2;
    mouseY = event.clientY - rect.top - canvas.height / 2;
});

    const container = document.querySelector("#starfield") as HTMLElement;
    invariant(container, "container should not be null");
    const resizeObserver = new ResizeObserver(setup);
    resizeObserver.observe(container);

    function setup() {
    invariant(ctx, "canvas context should not be null");
    rafId > 0 && cancelAnimationFrame(rafId);

    const { clientWidth: width, clientHeight: height } = container;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);

    for (const star of stars) {
        star.x = Math.random() * width - width / 2;
        star.y = Math.random() * height - height / 2;
        star.yPrev = star.y; 
    }

    ctx.translate(width / 2, height / 2);
    ctx.fillStyle = "rgba(0, 0, 0, 0.2)";
    ctx.strokeStyle = "white";
    rafId = requestAnimationFrame(frame);
    }


    function frame() {
    invariant(ctx, "canvas context should not be null");
    const { clientWidth: width, clientHeight: height } = container;

    for (const star of stars) {
        star.update(width, height, SPEED);

        const isHovered = Math.hypot(star.x - mouseX, star.y - mouseY) < 20;
        star.draw(ctx, isHovered);
    }

    ctx.fillRect(-width / 2, -height / 2, width, height);
    rafId = requestAnimationFrame(frame);
    }
</script>
